#include<iostream>
#include <cmath>
#include<opencv2/opencv.hpp>
using namespace std;
using namespace cv;

vector<uchar>Pixel;
vector<Point>offset_T;
int count_=0;
static const Point offsets16[][2] =
{
	{ -3, 0 }, { -3, -1 }, { -2, -2 }, { -1, -3 }, { 0, -3 }, { 1, -3 }, { 2, -2 }, { 3, -1 },
	{ 3, 0 }, { 3, 1 }, { 2, 2 }, { 1, 3 }, { 0, 3 }, { -1, 3 }, { -2, 2 }, { -3, 1 }
};
int main()
{
	for (int k=0;k<16;k++)
		offset_T.push_back(offsets16[k][2]);
	Mat src = imread("1.jpg");
	imshow("src",src);
	//遍历图像
	Point T;
	for (int x = 3; x < src.cols - 3; x++)
	{
		for (int y = 3; y < src.rows - 3; y++)
		{

		//设置阈值
		float T1 = src.at<uchar>(y, x) + src.at<uchar>(y, x)*0.2;
		float T2 = src.at<uchar>(y, x) - src.at<uchar>(y, x)*0.2;
		T.x = x;
		T.y = y;
		//得到16像素值存放早vector中			
		for (int k = 0; k < 16; k++)
		{
			uchar pixel = src.at<uchar>(offset_T[k] + T);
			Pixel.push_back(pixel);
		}
		//像素值的检测
		int count_T1=0,count_T2=0;
		for (int k=0;k<16;k++)
		{
			if (Pixel[k] - T1)
				count_T1++;			//把大于T1的存起来；
			if (T2 - Pixel[k])
				count_T2++;			//把小于T2的存起来；
		}
		if (count_T1 == 12 || count_T2 == 12)
		{
			count_++;
			circle(src, CvPoint(x,y), 2, CvScalar(255,0,0), 1,  8,  0);
		}
		Pixel.clear();
		}
		
}

	cout << Pixel.size()<< endl;
	cout << count_ << endl;
	imshow("xxx", src);
	waitKey();
	return 0;
}


